// Generated by CoffeeScript 1.8.0
(function() {
  var Filog,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  Filog = (function() {
    var location, plain, pretty, toType, uuid;

    Filog.prototype.toString = function() {
      return '[object Filog]';
    };

    function Filog(opt) {
      this.log = __bind(this.log, this);
      this.el = null;
      this.cache = [];
      this.id = "filog-" + (uuid(6));
      this.selector = null;
      this.console = true;
      this.display = true;
      switch (toType(opt)) {
        case 'object':
          if ('undefined' !== typeof opt.id) {
            this.id = opt.id;
          }
          if ('undefined' !== typeof opt.selector) {
            this.selector = opt.selector;
          }
          if ('undefined' !== typeof opt.console) {
            this.console = opt.console;
          }
          if ('undefined' !== typeof opt.display) {
            this.display = opt.display;
          }
          break;
        case 'string':
          this.selector = opt;
          break;
        case 'undefined':
          void 0;
          break;
        default:
          throw new Error("'opt' is type '" + (toType(opt)) + "', not 'string|object'");
      }
    }

    Filog.prototype.log = function() {
      var arg, line;
      if (this.console) {
        console.log.apply(console, arguments);
      }
      line = ((function() {
        var _i, _len, _ref, _results;
        _ref = [].slice.call(arguments);
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          arg = _ref[_i];
          _results.push(pretty(arg));
        }
        return _results;
      }).apply(this, arguments)).join(' ');
      if (this.display) {
        if (!this.el) {
          this.initEl(line);
        }
        if (this.el) {
          this.el.innerHTML += line + '\n';
          this.el.scrollTop = this.el.scrollHeight;
        }
      }
      return ((function() {
        var _i, _len, _ref, _results;
        _ref = [].slice.call(arguments);
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          arg = _ref[_i];
          _results.push(plain(arg));
        }
        return _results;
      }).apply(this, arguments)).join(' ');
    };

    Filog.prototype.initEl = function(line) {
      if (!document) {
        return;
      }
      if ('loading' === document.readyState) {
        if (!this.cache.length) {
          document.addEventListener('DOMContentLoaded', (function(_this) {
            return function() {
              if (!_this.el) {
                return _this.initEl();
              }
            };
          })(this));
        }
        return this.cache.push(line);
      }
      if (this.selector) {
        console.log(this.id, 4);
        this.el = document.querySelector(this.selector);
      } else {
        console.log(this.id, 5);
        this.el = document.createElement('div');
        this.el.setAttribute('class', 'filog');
        this.el.setAttribute('id', this.id);
        document.body.appendChild(this.el);
      }
      if (this.el && this.cache.length) {
        this.el.innerHTML += (this.cache.join('\n')) + '\n';
      }
      return this.cache = [];
    };

    location = function(error) {
      var stack, _ref;
      stack = error.stack.split('\n');
      if ('Error: ' + error.message === stack[0]) {
        stack.shift();
      }
      return (_ref = stack[0].match(/\/([^.\/]+\.(js|html?):\d+(:\d+)?)/)) != null ? _ref[1] : void 0;
    };

    plain = function(value) {
      switch (toType(value)) {
        case 'string':
          return value;
        case 'undefined':
        case 'null':
          return "[" + value + "]";
        case 'error':
          return "" + (location(value)) + " " + value.message;
        case 'array':
          return "[.." + value.length + "..]";
        default:
          return "" + value;
      }
    };

    pretty = function(value) {
      var type;
      type = toType(value);
      switch (type) {
        case 'string':
          return value.replace(/</g, '&lt;');
        case 'error':
          return "<em class=\"filog-location\">" + (location(value)) + "</em> <em class=\"filog-error\">" + value.message + "</em>";
        default:
          return "<em class=\"filog-" + type + "\">" + (plain(value)) + "</em>";
      }
    };

    toType = function(value) {
      if (null === value) {
        return 'null';
      }
      return {}.toString.call(value).match(/\s([a-z|A-Z]+)/)[1].toLowerCase();
    };

    uuid = function(length) {
      return (Math.random().toString(36) + '000000').substr(2, length);
    };

    return Filog;

  })();

  window.Filog = Filog;

}).call(this);
