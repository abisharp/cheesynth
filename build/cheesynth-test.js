// Generated by CoffeeScript 1.8.0
(function() {
  var CheeSynth, Claud, Test, test,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  CheeSynth = (function() {
    var Fixture, xx;

    CheeSynth.prototype.toString = function() {
      return '[object CheeSynth]';
    };

    function CheeSynth(opt) {
      if (opt == null) {
        opt = {};
      }
      this.el = opt.el;
      this.width = opt.width;
      this.height = opt.height;
      this.fixtures = [];
    }

    CheeSynth.prototype.add = function(x, y, component) {
      var fixture;
      this.fixtures.push(fixture = new Fixture(x, y, component));
      return fixture;
    };

    CheeSynth.prototype.render = function() {
      var fixture, line, out, row, _i, _len, _ref;
      line = '· ' + (new Array(this.width / 2)).join('· ');
      out = (function() {
        var _i, _ref, _results;
        _results = [];
        for (row = _i = 1, _ref = this.height; 1 <= _ref ? _i <= _ref : _i >= _ref; row = 1 <= _ref ? ++_i : --_i) {
          _results.push(line);
        }
        return _results;
      }).call(this);
      _ref = this.fixtures;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        fixture = _ref[_i];
        fixture.draw(out);
      }
      return this.el.innerHTML = out.join('\n');
    };

    xx = function(xx) {};

    Fixture = (function() {
      function Fixture(x, y, component) {
        this.x = x;
        this.y = y;
        this.component = component;
      }

      Fixture.prototype.draw = function(out) {
        var i, oline, rendered, rline, _i, _len;
        rendered = this.component.render();
        for (i = _i = 0, _len = rendered.length; _i < _len; i = ++_i) {
          rline = rendered[i];
          oline = out[this.y + i];
          if (!oline) {
            throw new Error("" + this.component + " exceeds height!");
          }
          out[this.y + i] = "" + (oline.substr(0, this.x)) + rline + (oline.substr(this.x + rline.length));
        }
        return void 0;
      };

      return Fixture;

    })();

    return CheeSynth;

  })();

  window.CheeSynth = CheeSynth;

  Claud = (function() {
    var xx;

    Claud.prototype.toString = function() {
      return '[object Claud]';
    };

    function Claud(opt) {
      if (opt == null) {
        opt = {};
      }
      this.keydown = __bind(this.keydown, this);
      this.log = new Filog(opt.selectors.out).log;
      this["in"] = document.querySelector(opt.selectors["in"]);
      this["in"].setAttribute('contenteditable', 'true');
      this["in"].addEventListener('keydown', this.keydown);
      this.commands = [];
      this.pointer = 0;
    }

    Claud.prototype.add = function(line) {
      this.pointer = (this.commands.push(this.log(line))) - 1;
      console.log(this.pointer);
      return this;
    };

    Claud.prototype.run = function() {
      return eval(this.commands[this.commands.length - 1]);
    };

    Claud.prototype.keydown = function(evt) {
      switch (evt.keyCode) {
        case 13:
          this.pointer = (this.commands.push(this.log(this["in"].innerHTML))) - 1;
          this["in"].innerHTML = '';
          this.run();
          return evt.preventDefault();
        case 38:
          this.pointer = Math.max(0, this.pointer - 1);
          this["in"].innerHTML = this.commands[this.pointer];
          return evt.preventDefault();
        case 40:
          this.pointer = Math.min(this.commands.length - 1, this.pointer + 1);
          this["in"].innerHTML = this.commands[this.pointer];
          return evt.preventDefault();
      }
    };

    xx = function(xx) {};

    return Claud;

  })();

  window.Claud = Claud;

  CheeSynth.Component = (function() {
    Component.prototype.toString = function() {
      return '[object Component]';
    };

    function Component(opt) {
      this.id = opt.id;
    }

    Component.prototype.render = function() {
      return ['.-V-V-.', '|     |', "| " + this.id + " |", '|     |', "'=V=V='"];
    };

    return Component;

  })();

  Test = (function() {
    var invisibles, toType;

    Test.prototype.toString = function() {
      return '[object Test]';
    };

    Test.prototype.jobs = [];

    function Test(opt) {
      if (opt == null) {
        opt = {};
      }
      this.run = __bind(this.run, this);
    }

    Test.prototype.run = function() {
      var actual, double, expect, job, md, name, result, runner, summary, tallies, _i, _len, _ref;
      md = [];
      tallies = [0, 0];
      double = null;
      _ref = this.jobs;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        job = _ref[_i];
        switch (toType(job)) {
          case 'function':
            double = job(double);
            break;
          case 'string':
            md.push(job);
            break;
          case 'array':
            runner = job[0], name = job[1], expect = job[2], actual = job[3];
            result = runner(expect, actual, double);
            if (!result) {
              md.push("\u2713 " + name + "  ");
              tallies[0]++;
            } else {
              md.push("\u2718 " + name + "  ");
              md.push("    " + result + "  ");
              tallies[1]++;
            }
        }
        summary = "  passed " + tallies[0] + "/" + (tallies[0] + tallies[1]) + " ";
        summary += tallies[1] ? '\u2718' : '\u2714';
      }
      md.unshift('<a href="#end" id="top">\u2b07</a>' + summary);
      md.push('\n<a href="#top" id="end">\u2b06</a>' + summary);
      return md.join('\n');
    };

    Test.prototype.section = function(text) {
      return this.jobs.push(("\n\n" + text + "\n-") + (new Array(text.length).join('-')) + '\n');
    };

    Test.prototype.custom = function(tests, runner) {
      var i, test, _i, _len;
      for (i = _i = 0, _len = tests.length; _i < _len; i = ++_i) {
        test = tests[i];
        if ('function' === toType(test)) {
          this.jobs.push(test);
        } else {
          this.jobs.push([runner, test, tests[++_i], tests[++_i]]);
        }
      }
      return this.jobs.push('- - -');
    };

    Test.prototype.fail = function(result, delivery, expect, types) {
      if (types) {
        result = "" + (invisibles(result)) + " (" + (toType(result)) + ")";
        expect = "" + (invisibles(expect)) + " (" + (toType(expect)) + ")";
      }
      return "" + (invisibles(result)) + "\n    ...was " + delivery + ", but expected...\n    " + (invisibles(expect));
    };

    invisibles = function(value) {
      return value.toString().replace(/^\s+|\s+$/g, function(match) {
        return '\u00b7' + (new Array(match.length)).join('\u00b7');
      });
    };

    Test.prototype.throws = function(tests) {
      return this.custom(tests, (function(_this) {
        return function(expect, actual, double) {
          var e, error;
          error = false;
          try {
            actual(double);
          } catch (_error) {
            e = _error;
            error = e.message;
          }
          if (!error) {
            return "No exception thrown, expected...\n    " + expect;
          } else if (expect !== error) {
            return _this.fail(error, 'thrown', expect);
          }
        };
      })(this));
    };

    Test.prototype.equal = function(tests) {
      return this.custom(tests, (function(_this) {
        return function(expect, actual, double) {
          var e, error, result;
          error = false;
          try {
            result = actual(double);
          } catch (_error) {
            e = _error;
            error = e.message;
          }
          if (error) {
            return "Unexpected exception...\n    " + error;
          } else if (expect !== result) {
            return _this.fail(result, 'returned', expect, result + '' === expect + '');
          }
        };
      })(this));
    };

    Test.prototype.is = function(tests) {
      return this.custom(tests, (function(_this) {
        return function(expect, actual, double) {
          var e, error, result;
          error = false;
          try {
            result = actual(double);
          } catch (_error) {
            e = _error;
            error = e.message;
          }
          if (error) {
            return "Unexpected exception...\n    " + error;
          } else if (expect !== toType(result)) {
            return _this.fail("type " + (toType(result)), 'returned', "type " + expect);
          }
        };
      })(this));
    };

    toType = function(x) {
      return {}.toString.call(x).match(/\s([a-z|A-Z]+)/)[1].toLowerCase();
    };

    return Test;

  })();

  test = new Test;

  CheeSynth.runTest = test.run;

  test.section("Constructor");

  test.is([
    "Instantiate with no arguments", 'object', function() {
      return new CheeSynth();
    }
  ]);

  test.equal([
    "`toString()` as expected", '[object CheeSynth]', function() {
      return (new CheeSynth()).toString();
    }
  ]);

}).call(this);
